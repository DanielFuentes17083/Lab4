

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Feb 19 18:14:54 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.10
    20                           ; Generated 31/07/2019 GMT
    21                           ; 
    22                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F887 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  008F                     	;# 
   254  0090                     	;# 
   255  0091                     	;# 
   256  0092                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0094                     	;# 
   261  0095                     	;# 
   262  0096                     	;# 
   263  0097                     	;# 
   264  0098                     	;# 
   265  0099                     	;# 
   266  009A                     	;# 
   267  009B                     	;# 
   268  009C                     	;# 
   269  009D                     	;# 
   270  009E                     	;# 
   271  009F                     	;# 
   272  0105                     	;# 
   273  0107                     	;# 
   274  0108                     	;# 
   275  0109                     	;# 
   276  010C                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010E                     	;# 
   280  010F                     	;# 
   281  0185                     	;# 
   282  0187                     	;# 
   283  0188                     	;# 
   284  0189                     	;# 
   285  018C                     	;# 
   286  018D                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  0088                     	;# 
   327  0089                     	;# 
   328  008C                     	;# 
   329  008D                     	;# 
   330  008E                     	;# 
   331  008F                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0094                     	;# 
   339  0095                     	;# 
   340  0096                     	;# 
   341  0097                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009A                     	;# 
   345  009B                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  0105                     	;# 
   351  0107                     	;# 
   352  0108                     	;# 
   353  0109                     	;# 
   354  010C                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0185                     	;# 
   360  0187                     	;# 
   361  0188                     	;# 
   362  0189                     	;# 
   363  018C                     	;# 
   364  018D                     	;# 
   365  0019                     _TXREG	set	25
   366  0018                     _RCSTAbits	set	24
   367  0013                     _SSPBUF	set	19
   368  0014                     _SSPCON	set	20
   369  0008                     _PORTD	set	8
   370  0006                     _PORTB	set	6
   371  0007                     _PORTCbits	set	7
   372  001A                     _RCREG	set	26
   373  0005                     _PORTA	set	5
   374  000C                     _PIR1bits	set	12
   375  000B                     _INTCONbits	set	11
   376  0099                     _SPBRG	set	153
   377  008C                     _PIE1bits	set	140
   378  0098                     _TXSTAbits	set	152
   379  0094                     _SSPSTATbits	set	148
   380  0094                     _SSPSTAT	set	148
   381  0088                     _TRISD	set	136
   382  0086                     _TRISB	set	134
   383  0085                     _TRISA	set	133
   384  043B                     _TRISC3	set	1083
   385  043D                     _TRISC5	set	1085
   386  043A                     _TRISC2	set	1082
   387  0187                     _BAUDCTLbits	set	391
   388  0189                     _ANSELH	set	393
   389  0188                     _ANSEL	set	392
   390                           
   391                           ; #config settings
   392  0000                     
   393                           	psect	cinit
   394  000F                     start_initialization:	
   395  000F                     __initialization:	
   396                           
   397                           ; Clear objects allocated to COMMON
   398  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   399  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   400  0011                     end_of_initialization:	
   401                           ;End of C runtime variable initialization code
   402                           
   403  0011                     __end_of__initialization:	
   404  0011  0183               	clrf	3
   405  0012  120A  118A  2815   	ljmp	_main	;jump to C main() function
   406                           
   407                           	psect	bssCOMMON
   408  0078                     __pbssCOMMON:	
   409  0078                     _pot2:	
   410  0078                     	ds	1
   411  0079                     _pot1:	
   412  0079                     	ds	1
   413                           
   414                           	psect	cstackCOMMON
   415  0070                     __pcstackCOMMON:	
   416  0070                     ?_setup:	
   417  0070                     ?_spiWrite:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ?_spiRead:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     ?_ENVIO:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0070                     ?_ISR:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     ??_ISR:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ?_main:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     ?_spiReceiveWait:	
   436                           ; 1 bytes @ 0x0
   437                           
   438                           
   439                           ; 1 bytes @ 0x0
   440  0070                     	ds	2
   441  0072                     ?_ComSetup:	
   442  0072                     ??_spiWrite:	
   443                           ; 1 bytes @ 0x2
   444                           
   445  0072                     ??_spiRead:	
   446                           ; 1 bytes @ 0x2
   447                           
   448  0072                     ??_ENVIO:	
   449                           ; 1 bytes @ 0x2
   450                           
   451  0072                     ?_spiInit:	
   452                           ; 1 bytes @ 0x2
   453                           
   454  0072                     ??_spiReceiveWait:	
   455                           ; 1 bytes @ 0x2
   456                           
   457  0072                     spiInit@sDataSample:	
   458                           ; 1 bytes @ 0x2
   459                           
   460  0072                     spiWrite@dat:	
   461                           ; 1 bytes @ 0x2
   462                           
   463  0072                     ENVIO@value:	
   464                           ; 1 bytes @ 0x2
   465                           
   466  0072                     ComSetup@BR:	
   467                           ; 1 bytes @ 0x2
   468                           
   469                           
   470                           ; 2 bytes @ 0x2
   471  0072                     	ds	1
   472  0073                     spiInit@sClockIdle:	
   473                           
   474                           ; 1 bytes @ 0x3
   475  0073                     	ds	1
   476  0074                     ??_ComSetup:	
   477  0074                     spiInit@sTransmitEdge:	
   478                           ; 1 bytes @ 0x4
   479                           
   480                           
   481                           ; 1 bytes @ 0x4
   482  0074                     	ds	1
   483  0075                     ??_spiInit:	
   484  0075                     spiInit@sType:	
   485                           ; 1 bytes @ 0x5
   486                           
   487                           
   488                           ; 1 bytes @ 0x5
   489  0075                     	ds	1
   490  0076                     ??_setup:	
   491  0076                     ??_main:	
   492                           ; 1 bytes @ 0x6
   493                           
   494                           
   495                           ; 1 bytes @ 0x6
   496  0076                     	ds	2
   497                           
   498                           	psect	maintext
   499  0015                     __pmaintext:	
   500 ;;
   501 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   502 ;;
   503 ;; *************** function _main *****************
   504 ;; Defined at:
   505 ;;		line 47 in file "main.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;		None
   508 ;; Auto vars:     Size  Location     Type
   509 ;;		None
   510 ;; Return value:  Size  Location     Type
   511 ;;                  1    wreg      void 
   512 ;; Registers used:
   513 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   514 ;; Tracked objects:
   515 ;;		On entry : B00/0
   516 ;;		On exit  : 0/0
   517 ;;		Unchanged: 0/0
   518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   519 ;;      Params:         0       0       0       0       0
   520 ;;      Locals:         0       0       0       0       0
   521 ;;      Temps:          2       0       0       0       0
   522 ;;      Totals:         2       0       0       0       0
   523 ;;Total ram usage:        2 bytes
   524 ;; Hardware stack levels required when called:    3
   525 ;; This function calls:
   526 ;;		_ComSetup
   527 ;;		_ENVIO
   528 ;;		_setup
   529 ;;		_spiRead
   530 ;;		_spiWrite
   531 ;; This function is called by:
   532 ;;		Startup code after reset
   533 ;; This function uses a non-reentrant model
   534 ;;
   535                           
   536                           
   537                           ;psect for function _main
   538  0015                     _main:	
   539  0015                     l990:	
   540                           ;incstack = 0
   541                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   542                           
   543                           
   544                           ;main.c: 48:     setup();
   545  0015  120A  118A  20BE  120A  118A  	fcall	_setup
   546  001A                     l992:	
   547                           
   548                           ;main.c: 49:     ComSetup(9600);
   549  001A  3080               	movlw	128
   550  001B  00F2               	movwf	ComSetup@BR
   551  001C  3025               	movlw	37
   552  001D  00F3               	movwf	ComSetup@BR+1
   553  001E  120A  118A  2070  120A  118A  	fcall	_ComSetup
   554  0023                     l994:	
   555                           
   556                           ;main.c: 51:         PORTCbits.RC2 = 0;
   557  0023  1283               	bcf	3,5	;RP0=0, select bank0
   558  0024  1303               	bcf	3,6	;RP1=0, select bank0
   559  0025  1107               	bcf	7,2	;volatile
   560  0026                     l996:	
   561                           
   562                           ;main.c: 52:         _delay((unsigned long)((1)*(8000000/4000.0)));
   563  0026  3003               	movlw	3
   564  0027  00F7               	movwf	??_main+1
   565  0028  3097               	movlw	151
   566  0029  00F6               	movwf	??_main
   567  002A                     u67:	
   568  002A  0BF6               	decfsz	??_main,f
   569  002B  282A               	goto	u67
   570  002C  0BF7               	decfsz	??_main+1,f
   571  002D  282A               	goto	u67
   572  002E  282F               	nop2
   573  002F                     l998:	
   574                           
   575                           ;main.c: 53:         spiWrite(1);
   576  002F  3001               	movlw	1
   577  0030  120A  118A  211D  120A  118A  	fcall	_spiWrite
   578  0035                     l1000:	
   579                           
   580                           ;main.c: 54:         pot1 = spiRead();
   581  0035  120A  118A  210D  120A  118A  	fcall	_spiRead
   582  003A  00F6               	movwf	??_main
   583  003B  0876               	movf	??_main,w
   584  003C  00F9               	movwf	_pot1
   585  003D                     l1002:	
   586                           
   587                           ;main.c: 55:         _delay((unsigned long)((10)*(8000000/4000.0)));
   588  003D  301A               	movlw	26
   589  003E  00F7               	movwf	??_main+1
   590  003F  30F8               	movlw	248
   591  0040  00F6               	movwf	??_main
   592  0041                     u77:	
   593  0041  0BF6               	decfsz	??_main,f
   594  0042  2841               	goto	u77
   595  0043  0BF7               	decfsz	??_main+1,f
   596  0044  2841               	goto	u77
   597  0045  0000               	nop
   598  0046                     l1004:	
   599                           
   600                           ;main.c: 56:         spiWrite(0);
   601  0046  3000               	movlw	0
   602  0047  120A  118A  211D  120A  118A  	fcall	_spiWrite
   603  004C                     l1006:	
   604                           
   605                           ;main.c: 57:         pot2 = spiRead();
   606  004C  120A  118A  210D  120A  118A  	fcall	_spiRead
   607  0051  00F6               	movwf	??_main
   608  0052  0876               	movf	??_main,w
   609  0053  00F8               	movwf	_pot2
   610  0054                     l1008:	
   611                           
   612                           ;main.c: 58:          _delay((unsigned long)((1)*(8000000/4000.0)));
   613  0054  3003               	movlw	3
   614  0055  00F7               	movwf	??_main+1
   615  0056  3097               	movlw	151
   616  0057  00F6               	movwf	??_main
   617  0058                     u87:	
   618  0058  0BF6               	decfsz	??_main,f
   619  0059  2858               	goto	u87
   620  005A  0BF7               	decfsz	??_main+1,f
   621  005B  2858               	goto	u87
   622  005C  285D               	nop2
   623  005D                     l1010:	
   624                           
   625                           ;main.c: 59:        PORTCbits.RC2 = 1;
   626  005D  1283               	bcf	3,5	;RP0=0, select bank0
   627  005E  1303               	bcf	3,6	;RP1=0, select bank0
   628  005F  1507               	bsf	7,2	;volatile
   629  0060                     l1012:	
   630                           
   631                           ;main.c: 60:        ENVIO(pot1);
   632  0060  0879               	movf	_pot1,w
   633  0061  120A  118A  2101  120A  118A  	fcall	_ENVIO
   634  0066                     l1014:	
   635                           
   636                           ;main.c: 61:        ENVIO(pot2);
   637  0066  0878               	movf	_pot2,w
   638  0067  120A  118A  2101  120A  118A  	fcall	_ENVIO
   639  006C  2823               	goto	l994
   640  006D  120A  118A  280C   	ljmp	start
   641  0070                     __end_of_main:	
   642                           
   643                           	psect	text1
   644  011D                     __ptext1:	
   645 ;; *************** function _spiWrite *****************
   646 ;; Defined at:
   647 ;;		line 32 in file "SPI.c"
   648 ;; Parameters:    Size  Location     Type
   649 ;;  dat             1    wreg     unsigned char 
   650 ;; Auto vars:     Size  Location     Type
   651 ;;  dat             1    2[COMMON] unsigned char 
   652 ;; Return value:  Size  Location     Type
   653 ;;                  1    wreg      void 
   654 ;; Registers used:
   655 ;;		wreg
   656 ;; Tracked objects:
   657 ;;		On entry : 0/0
   658 ;;		On exit  : 0/0
   659 ;;		Unchanged: 0/0
   660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   661 ;;      Params:         0       0       0       0       0
   662 ;;      Locals:         1       0       0       0       0
   663 ;;      Temps:          0       0       0       0       0
   664 ;;      Totals:         1       0       0       0       0
   665 ;;Total ram usage:        1 bytes
   666 ;; Hardware stack levels used:    1
   667 ;; Hardware stack levels required when called:    1
   668 ;; This function calls:
   669 ;;		Nothing
   670 ;; This function is called by:
   671 ;;		_main
   672 ;; This function uses a non-reentrant model
   673 ;;
   674                           
   675                           
   676                           ;psect for function _spiWrite
   677  011D                     _spiWrite:	
   678                           
   679                           ;incstack = 0
   680                           ; Regs used in _spiWrite: [wreg]
   681                           ;spiWrite@dat stored from wreg
   682  011D  00F2               	movwf	spiWrite@dat
   683  011E                     l780:	
   684                           
   685                           ;SPI.c: 32: void spiWrite(char dat);SPI.c: 33: {;SPI.c: 34:     SSPBUF = dat;
   686  011E  0872               	movf	spiWrite@dat,w
   687  011F  1283               	bcf	3,5	;RP0=0, select bank0
   688  0120  1303               	bcf	3,6	;RP1=0, select bank0
   689  0121  0093               	movwf	19	;volatile
   690  0122                     l87:	
   691  0122  0008               	return
   692  0123                     __end_of_spiWrite:	
   693                           
   694                           	psect	text2
   695  010D                     __ptext2:	
   696 ;; *************** function _spiRead *****************
   697 ;; Defined at:
   698 ;;		line 45 in file "SPI.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;		None
   701 ;; Auto vars:     Size  Location     Type
   702 ;;		None
   703 ;; Return value:  Size  Location     Type
   704 ;;                  1    wreg      unsigned char 
   705 ;; Registers used:
   706 ;;		wreg, status,2, status,0, pclath, cstack
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 0/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   712 ;;      Params:         0       0       0       0       0
   713 ;;      Locals:         0       0       0       0       0
   714 ;;      Temps:          0       0       0       0       0
   715 ;;      Totals:         0       0       0       0       0
   716 ;;Total ram usage:        0 bytes
   717 ;; Hardware stack levels used:    1
   718 ;; Hardware stack levels required when called:    2
   719 ;; This function calls:
   720 ;;		_spiReceiveWait
   721 ;; This function is called by:
   722 ;;		_main
   723 ;; This function uses a non-reentrant model
   724 ;;
   725                           
   726                           
   727                           ;psect for function _spiRead
   728  010D                     _spiRead:	
   729  010D                     l782:	
   730                           ;incstack = 0
   731                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
   732                           
   733                           
   734                           ;SPI.c: 47:     spiReceiveWait();
   735  010D  120A  118A  2116  120A  118A  	fcall	_spiReceiveWait
   736  0112                     l784:	
   737                           
   738                           ;SPI.c: 48:     return(SSPBUF);
   739  0112  1283               	bcf	3,5	;RP0=0, select bank0
   740  0113  1303               	bcf	3,6	;RP1=0, select bank0
   741  0114  0813               	movf	19,w	;volatile
   742  0115                     l95:	
   743  0115  0008               	return
   744  0116                     __end_of_spiRead:	
   745                           
   746                           	psect	text3
   747  0116                     __ptext3:	
   748 ;; *************** function _spiReceiveWait *****************
   749 ;; Defined at:
   750 ;;		line 27 in file "SPI.c"
   751 ;; Parameters:    Size  Location     Type
   752 ;;		None
   753 ;; Auto vars:     Size  Location     Type
   754 ;;		None
   755 ;; Return value:  Size  Location     Type
   756 ;;                  1    wreg      void 
   757 ;; Registers used:
   758 ;;		None
   759 ;; Tracked objects:
   760 ;;		On entry : 0/0
   761 ;;		On exit  : 0/0
   762 ;;		Unchanged: 0/0
   763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   764 ;;      Params:         0       0       0       0       0
   765 ;;      Locals:         0       0       0       0       0
   766 ;;      Temps:          0       0       0       0       0
   767 ;;      Totals:         0       0       0       0       0
   768 ;;Total ram usage:        0 bytes
   769 ;; Hardware stack levels used:    1
   770 ;; Hardware stack levels required when called:    1
   771 ;; This function calls:
   772 ;;		Nothing
   773 ;; This function is called by:
   774 ;;		_spiRead
   775 ;; This function uses a non-reentrant model
   776 ;;
   777                           
   778                           
   779                           ;psect for function _spiReceiveWait
   780  0116                     _spiReceiveWait:	
   781  0116                     l728:	
   782                           ;incstack = 0
   783                           ; Regs used in _spiReceiveWait: []
   784                           
   785  0116                     l81:	
   786                           ;SPI.c: 29:     while ( !SSPSTATbits.BF );
   787                           
   788  0116  1683               	bsf	3,5	;RP0=1, select bank1
   789  0117  1303               	bcf	3,6	;RP1=0, select bank1
   790  0118  1C14               	btfss	20,0	;volatile
   791  0119  291B               	goto	u21
   792  011A  291C               	goto	u20
   793  011B                     u21:	
   794  011B  2916               	goto	l81
   795  011C                     u20:	
   796  011C                     l84:	
   797  011C  0008               	return
   798  011D                     __end_of_spiReceiveWait:	
   799                           
   800                           	psect	text4
   801  00BE                     __ptext4:	
   802 ;; *************** function _setup *****************
   803 ;; Defined at:
   804 ;;		line 66 in file "main.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;		None
   807 ;; Auto vars:     Size  Location     Type
   808 ;;		None
   809 ;; Return value:  Size  Location     Type
   810 ;;                  1    wreg      void 
   811 ;; Registers used:
   812 ;;		wreg, status,2, status,0, pclath, cstack
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   818 ;;      Params:         0       0       0       0       0
   819 ;;      Locals:         0       0       0       0       0
   820 ;;      Temps:          0       0       0       0       0
   821 ;;      Totals:         0       0       0       0       0
   822 ;;Total ram usage:        0 bytes
   823 ;; Hardware stack levels used:    1
   824 ;; Hardware stack levels required when called:    2
   825 ;; This function calls:
   826 ;;		_spiInit
   827 ;; This function is called by:
   828 ;;		_main
   829 ;; This function uses a non-reentrant model
   830 ;;
   831                           
   832                           
   833                           ;psect for function _setup
   834  00BE                     _setup:	
   835  00BE                     l940:	
   836                           ;incstack = 0
   837                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   838                           
   839                           
   840                           ;main.c: 67:     ANSEL = 0;
   841  00BE  1683               	bsf	3,5	;RP0=1, select bank3
   842  00BF  1703               	bsf	3,6	;RP1=1, select bank3
   843  00C0  0188               	clrf	8	;volatile
   844                           
   845                           ;main.c: 68:     ANSELH = 0;
   846  00C1  0189               	clrf	9	;volatile
   847  00C2                     l942:	
   848                           
   849                           ;main.c: 69:     TRISC2 = 0;
   850  00C2  1683               	bsf	3,5	;RP0=1, select bank1
   851  00C3  1303               	bcf	3,6	;RP1=0, select bank1
   852  00C4  1107               	bcf	7,2	;volatile
   853                           
   854                           ;main.c: 70:     TRISA = 0;
   855  00C5  0185               	clrf	5	;volatile
   856                           
   857                           ;main.c: 71:     TRISB = 0;
   858  00C6  0186               	clrf	6	;volatile
   859                           
   860                           ;main.c: 72:     TRISD = 0;
   861  00C7  0188               	clrf	8	;volatile
   862                           
   863                           ;main.c: 73:     PORTA = 0;
   864  00C8  1283               	bcf	3,5	;RP0=0, select bank0
   865  00C9  1303               	bcf	3,6	;RP1=0, select bank0
   866  00CA  0185               	clrf	5	;volatile
   867                           
   868                           ;main.c: 74:     PORTB = 0;
   869  00CB  0186               	clrf	6	;volatile
   870                           
   871                           ;main.c: 75:     PORTD = 0;
   872  00CC  0188               	clrf	8	;volatile
   873  00CD                     l944:	
   874                           
   875                           ;main.c: 76:     PORTCbits.RC2 = 1;
   876  00CD  1507               	bsf	7,2	;volatile
   877  00CE                     l946:	
   878                           
   879                           ;main.c: 77:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW
      +                          , SPI_IDLE_2_ACTIVE);
   880  00CE  01F2               	clrf	spiInit@sDataSample
   881  00CF  01F3               	clrf	spiInit@sClockIdle
   882  00D0  01F4               	clrf	spiInit@sTransmitEdge
   883  00D1  3020               	movlw	32
   884  00D2  120A  118A  20DA  120A  118A  	fcall	_spiInit
   885  00D7                     l948:	
   886                           
   887                           ;main.c: 78:     INTCONbits.GIE = 1;
   888  00D7  178B               	bsf	11,7	;volatile
   889  00D8                     l950:	
   890                           
   891                           ;main.c: 79:     INTCONbits.PEIE = 1;
   892  00D8  170B               	bsf	11,6	;volatile
   893  00D9                     l61:	
   894  00D9  0008               	return
   895  00DA                     __end_of_setup:	
   896                           
   897                           	psect	text5
   898  00DA                     __ptext5:	
   899 ;; *************** function _spiInit *****************
   900 ;; Defined at:
   901 ;;		line 10 in file "SPI.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;  sType           1    wreg     enum E1264
   904 ;;  sDataSample     1    2[COMMON] enum E1272
   905 ;;  sClockIdle      1    3[COMMON] enum E1276
   906 ;;  sTransmitEdg    1    4[COMMON] enum E1280
   907 ;; Auto vars:     Size  Location     Type
   908 ;;  sType           1    5[COMMON] enum E1264
   909 ;; Return value:  Size  Location     Type
   910 ;;                  1    wreg      void 
   911 ;; Registers used:
   912 ;;		wreg, status,2, status,0
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   918 ;;      Params:         3       0       0       0       0
   919 ;;      Locals:         1       0       0       0       0
   920 ;;      Temps:          0       0       0       0       0
   921 ;;      Totals:         4       0       0       0       0
   922 ;;Total ram usage:        4 bytes
   923 ;; Hardware stack levels used:    1
   924 ;; Hardware stack levels required when called:    1
   925 ;; This function calls:
   926 ;;		Nothing
   927 ;; This function is called by:
   928 ;;		_setup
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           
   933                           ;psect for function _spiInit
   934  00DA                     _spiInit:	
   935                           
   936                           ;incstack = 0
   937                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   938                           ;spiInit@sType stored from wreg
   939  00DA  00F5               	movwf	spiInit@sType
   940  00DB                     l930:	
   941                           
   942                           ;SPI.c: 10: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 11: {;SPI.c: 12:     TRISC5 = 0;
   943  00DB  1683               	bsf	3,5	;RP0=1, select bank1
   944  00DC  1303               	bcf	3,6	;RP1=0, select bank1
   945  00DD  1287               	bcf	7,5	;volatile
   946                           
   947                           ;SPI.c: 13:     if(sType & 0b00000100)
   948  00DE  1D75               	btfss	spiInit@sType,2
   949  00DF  28E1               	goto	u51
   950  00E0  28E2               	goto	u50
   951  00E1                     u51:	
   952  00E1  28E6               	goto	l936
   953  00E2                     u50:	
   954  00E2                     l932:	
   955                           
   956                           ;SPI.c: 14:     {;SPI.c: 15:         SSPSTAT = sTransmitEdge;
   957  00E2  0874               	movf	spiInit@sTransmitEdge,w
   958  00E3  0094               	movwf	20	;volatile
   959  00E4                     l934:	
   960                           
   961                           ;SPI.c: 16:         TRISC3 = 1;
   962  00E4  1587               	bsf	7,3	;volatile
   963                           
   964                           ;SPI.c: 17:     }
   965  00E5  28EA               	goto	l77
   966  00E6                     l936:	
   967                           
   968                           ;SPI.c: 19:     {;SPI.c: 20:         SSPSTAT = sDataSample | sTransmitEdge;
   969  00E6  0872               	movf	spiInit@sDataSample,w
   970  00E7  0474               	iorwf	spiInit@sTransmitEdge,w
   971  00E8  0094               	movwf	20	;volatile
   972  00E9                     l938:	
   973                           
   974                           ;SPI.c: 21:         TRISC3 = 0;
   975  00E9  1187               	bcf	7,3	;volatile
   976  00EA                     l77:	
   977                           ;SPI.c: 22:     }
   978                           
   979                           
   980                           ;SPI.c: 24:     SSPCON = sType | sClockIdle;
   981  00EA  0875               	movf	spiInit@sType,w
   982  00EB  0473               	iorwf	spiInit@sClockIdle,w
   983  00EC  1283               	bcf	3,5	;RP0=0, select bank0
   984  00ED  1303               	bcf	3,6	;RP1=0, select bank0
   985  00EE  0094               	movwf	20	;volatile
   986  00EF                     l78:	
   987  00EF  0008               	return
   988  00F0                     __end_of_spiInit:	
   989                           
   990                           	psect	text6
   991  0101                     __ptext6:	
   992 ;; *************** function _ENVIO *****************
   993 ;; Defined at:
   994 ;;		line 47 in file "EUSART.c"
   995 ;; Parameters:    Size  Location     Type
   996 ;;  value           1    wreg     unsigned char 
   997 ;; Auto vars:     Size  Location     Type
   998 ;;  value           1    2[COMMON] unsigned char 
   999 ;; Return value:  Size  Location     Type
  1000 ;;                  1    wreg      void 
  1001 ;; Registers used:
  1002 ;;		wreg
  1003 ;; Tracked objects:
  1004 ;;		On entry : 0/0
  1005 ;;		On exit  : 0/0
  1006 ;;		Unchanged: 0/0
  1007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1008 ;;      Params:         0       0       0       0       0
  1009 ;;      Locals:         1       0       0       0       0
  1010 ;;      Temps:          0       0       0       0       0
  1011 ;;      Totals:         1       0       0       0       0
  1012 ;;Total ram usage:        1 bytes
  1013 ;; Hardware stack levels used:    1
  1014 ;; Hardware stack levels required when called:    1
  1015 ;; This function calls:
  1016 ;;		Nothing
  1017 ;; This function is called by:
  1018 ;;		_main
  1019 ;; This function uses a non-reentrant model
  1020 ;;
  1021                           
  1022                           
  1023                           ;psect for function _ENVIO
  1024  0101                     _ENVIO:	
  1025                           
  1026                           ;incstack = 0
  1027                           ; Regs used in _ENVIO: [wreg]
  1028                           ;ENVIO@value stored from wreg
  1029  0101  00F2               	movwf	ENVIO@value
  1030  0102                     l788:	
  1031  0102                     l123:	
  1032                           ;EUSART.c: 48:     while (TXSTAbits.TRMT == 0);
  1033                           
  1034  0102  1683               	bsf	3,5	;RP0=1, select bank1
  1035  0103  1303               	bcf	3,6	;RP1=0, select bank1
  1036  0104  1C98               	btfss	24,1	;volatile
  1037  0105  2907               	goto	u31
  1038  0106  2908               	goto	u30
  1039  0107                     u31:	
  1040  0107  2902               	goto	l123
  1041  0108                     u30:	
  1042  0108                     l790:	
  1043                           
  1044                           ;EUSART.c: 49:     TXREG = value;
  1045  0108  0872               	movf	ENVIO@value,w
  1046  0109  1283               	bcf	3,5	;RP0=0, select bank0
  1047  010A  1303               	bcf	3,6	;RP1=0, select bank0
  1048  010B  0099               	movwf	25	;volatile
  1049  010C                     l126:	
  1050  010C  0008               	return
  1051  010D                     __end_of_ENVIO:	
  1052                           
  1053                           	psect	text7
  1054  0070                     __ptext7:	
  1055 ;; *************** function _ComSetup *****************
  1056 ;; Defined at:
  1057 ;;		line 13 in file "EUSART.c"
  1058 ;; Parameters:    Size  Location     Type
  1059 ;;  BR              2    2[COMMON] unsigned int 
  1060 ;; Auto vars:     Size  Location     Type
  1061 ;;		None
  1062 ;; Return value:  Size  Location     Type
  1063 ;;                  1    wreg      void 
  1064 ;; Registers used:
  1065 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1066 ;; Tracked objects:
  1067 ;;		On entry : 0/0
  1068 ;;		On exit  : 0/0
  1069 ;;		Unchanged: 0/0
  1070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1071 ;;      Params:         2       0       0       0       0
  1072 ;;      Locals:         0       0       0       0       0
  1073 ;;      Temps:          0       0       0       0       0
  1074 ;;      Totals:         2       0       0       0       0
  1075 ;;Total ram usage:        2 bytes
  1076 ;; Hardware stack levels used:    1
  1077 ;; Hardware stack levels required when called:    1
  1078 ;; This function calls:
  1079 ;;		Nothing
  1080 ;; This function is called by:
  1081 ;;		_main
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           
  1086                           ;psect for function _ComSetup
  1087  0070                     _ComSetup:	
  1088  0070                     l952:	
  1089                           ;incstack = 0
  1090                           ; Regs used in _ComSetup: [wreg-fsr0h+status,2+status,0]
  1091                           
  1092                           
  1093                           ;EUSART.c: 14:     TXSTAbits.TX9 = 0;
  1094  0070  1683               	bsf	3,5	;RP0=1, select bank1
  1095  0071  1303               	bcf	3,6	;RP1=0, select bank1
  1096  0072  1318               	bcf	24,6	;volatile
  1097                           
  1098                           ;EUSART.c: 15:     TXSTAbits.TXEN = 1;
  1099  0073  1698               	bsf	24,5	;volatile
  1100                           
  1101                           ;EUSART.c: 16:     TXSTAbits.SYNC = 0;
  1102  0074  1218               	bcf	24,4	;volatile
  1103                           
  1104                           ;EUSART.c: 17:     TXSTAbits.BRGH = 1;
  1105  0075  1518               	bsf	24,2	;volatile
  1106                           
  1107                           ;EUSART.c: 18:     RCSTAbits.SPEN = 1;
  1108  0076  1283               	bcf	3,5	;RP0=0, select bank0
  1109  0077  1303               	bcf	3,6	;RP1=0, select bank0
  1110  0078  1798               	bsf	24,7	;volatile
  1111                           
  1112                           ;EUSART.c: 19:     RCSTAbits.RX9 = 0;
  1113  0079  1318               	bcf	24,6	;volatile
  1114                           
  1115                           ;EUSART.c: 20:     RCSTAbits.CREN = 1;
  1116  007A  1618               	bsf	24,4	;volatile
  1117                           
  1118                           ;EUSART.c: 21:     BAUDCTLbits.BRG16 = 0;
  1119  007B  1683               	bsf	3,5	;RP0=1, select bank3
  1120  007C  1703               	bsf	3,6	;RP1=1, select bank3
  1121  007D  1187               	bcf	7,3	;volatile
  1122                           
  1123                           ;EUSART.c: 22:     (INTCONbits.GIE = 1);
  1124  007E  178B               	bsf	11,7	;volatile
  1125                           
  1126                           ;EUSART.c: 23:     INTCONbits.PEIE = 1;
  1127  007F  170B               	bsf	11,6	;volatile
  1128                           
  1129                           ;EUSART.c: 24:     PIE1bits.RCIE = 1;
  1130  0080  1683               	bsf	3,5	;RP0=1, select bank1
  1131  0081  1303               	bcf	3,6	;RP1=0, select bank1
  1132  0082  168C               	bsf	12,5	;volatile
  1133                           
  1134                           ;EUSART.c: 25:     switch (BR){
  1135  0083  2893               	goto	l968
  1136  0084                     l954:	
  1137                           
  1138                           ;EUSART.c: 27:             SPBRG = 207;
  1139  0084  30CF               	movlw	207
  1140  0085  0099               	movwf	25	;volatile
  1141                           
  1142                           ;EUSART.c: 28:             break;
  1143  0086  28BD               	goto	l120
  1144  0087                     l956:	
  1145                           
  1146                           ;EUSART.c: 30:             SPBRG = 103;
  1147  0087  3067               	movlw	103
  1148  0088  0099               	movwf	25	;volatile
  1149                           
  1150                           ;EUSART.c: 31:             break;
  1151  0089  28BD               	goto	l120
  1152  008A                     l958:	
  1153                           
  1154                           ;EUSART.c: 33:             SPBRG = 25;
  1155  008A  3019               	movlw	25
  1156  008B  0099               	movwf	25	;volatile
  1157                           
  1158                           ;EUSART.c: 34:             break;
  1159  008C  28BD               	goto	l120
  1160  008D                     l960:	
  1161                           
  1162                           ;EUSART.c: 36:             SPBRG = 23;
  1163  008D  3017               	movlw	23
  1164  008E  0099               	movwf	25	;volatile
  1165                           
  1166                           ;EUSART.c: 37:             break;
  1167  008F  28BD               	goto	l120
  1168  0090                     l962:	
  1169                           
  1170                           ;EUSART.c: 39:             SPBRG = 12;
  1171  0090  300C               	movlw	12
  1172  0091  0099               	movwf	25	;volatile
  1173                           
  1174                           ;EUSART.c: 40:             break;
  1175  0092  28BD               	goto	l120
  1176  0093                     l968:	
  1177                           
  1178                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 5 sub-sw
      +                          itches
  1179                           ; Switch size 1, requested type "simple"
  1180                           ; Number of cases is 5, Range of values is 4 to 75
  1181                           ; switch strategies available:
  1182                           ; Name         Instructions Cycles
  1183                           ; simple_byte           16     9 (average)
  1184                           ; direct_byte          227    11 (fixed)
  1185                           ; jumptable            263     9 (fixed)
  1186                           ;	Chosen strategy is simple_byte
  1187  0093  0873               	movf	ComSetup@BR+1,w
  1188  0094  3A04               	xorlw	4	; case 4
  1189  0095  1903               	skipnz
  1190  0096  28A4               	goto	l1116
  1191  0097  3A0D               	xorlw	13	; case 9
  1192  0098  1903               	skipnz
  1193  0099  28A9               	goto	l1118
  1194  009A  3A2C               	xorlw	44	; case 37
  1195  009B  1903               	skipnz
  1196  009C  28AE               	goto	l1120
  1197  009D  3A0D               	xorlw	13	; case 40
  1198  009E  1903               	skipnz
  1199  009F  28B3               	goto	l1122
  1200  00A0  3A63               	xorlw	99	; case 75
  1201  00A1  1903               	skipnz
  1202  00A2  28B8               	goto	l1124
  1203  00A3  288A               	goto	l958
  1204  00A4                     l1116:	
  1205                           
  1206                           ; Switch size 1, requested type "simple"
  1207                           ; Number of cases is 1, Range of values is 176 to 176
  1208                           ; switch strategies available:
  1209                           ; Name         Instructions Cycles
  1210                           ; simple_byte            4     3 (average)
  1211                           ; direct_byte           14    11 (fixed)
  1212                           ; jumptable            263     9 (fixed)
  1213                           ;	Chosen strategy is simple_byte
  1214  00A4  0872               	movf	ComSetup@BR,w
  1215  00A5  3AB0               	xorlw	176	; case 176
  1216  00A6  1903               	skipnz
  1217  00A7  2884               	goto	l954
  1218  00A8  288A               	goto	l958
  1219  00A9                     l1118:	
  1220                           
  1221                           ; Switch size 1, requested type "simple"
  1222                           ; Number of cases is 1, Range of values is 96 to 96
  1223                           ; switch strategies available:
  1224                           ; Name         Instructions Cycles
  1225                           ; simple_byte            4     3 (average)
  1226                           ; direct_byte           14    11 (fixed)
  1227                           ; jumptable            263     9 (fixed)
  1228                           ;	Chosen strategy is simple_byte
  1229  00A9  0872               	movf	ComSetup@BR,w
  1230  00AA  3A60               	xorlw	96	; case 96
  1231  00AB  1903               	skipnz
  1232  00AC  2887               	goto	l956
  1233  00AD  288A               	goto	l958
  1234  00AE                     l1120:	
  1235                           
  1236                           ; Switch size 1, requested type "simple"
  1237                           ; Number of cases is 1, Range of values is 128 to 128
  1238                           ; switch strategies available:
  1239                           ; Name         Instructions Cycles
  1240                           ; simple_byte            4     3 (average)
  1241                           ; direct_byte           14    11 (fixed)
  1242                           ; jumptable            263     9 (fixed)
  1243                           ;	Chosen strategy is simple_byte
  1244  00AE  0872               	movf	ComSetup@BR,w
  1245  00AF  3A80               	xorlw	128	; case 128
  1246  00B0  1903               	skipnz
  1247  00B1  288A               	goto	l958
  1248  00B2  288A               	goto	l958
  1249  00B3                     l1122:	
  1250                           
  1251                           ; Switch size 1, requested type "simple"
  1252                           ; Number of cases is 1, Range of values is 177 to 177
  1253                           ; switch strategies available:
  1254                           ; Name         Instructions Cycles
  1255                           ; simple_byte            4     3 (average)
  1256                           ; direct_byte           14    11 (fixed)
  1257                           ; jumptable            263     9 (fixed)
  1258                           ;	Chosen strategy is simple_byte
  1259  00B3  0872               	movf	ComSetup@BR,w
  1260  00B4  3AB1               	xorlw	177	; case 177
  1261  00B5  1903               	skipnz
  1262  00B6  288D               	goto	l960
  1263  00B7  288A               	goto	l958
  1264  00B8                     l1124:	
  1265                           
  1266                           ; Switch size 1, requested type "simple"
  1267                           ; Number of cases is 1, Range of values is 0 to 0
  1268                           ; switch strategies available:
  1269                           ; Name         Instructions Cycles
  1270                           ; simple_byte            4     3 (average)
  1271                           ; direct_byte           11     8 (fixed)
  1272                           ; jumptable            260     6 (fixed)
  1273                           ;	Chosen strategy is simple_byte
  1274  00B8  0872               	movf	ComSetup@BR,w
  1275  00B9  3A00               	xorlw	0	; case 0
  1276  00BA  1903               	skipnz
  1277  00BB  2890               	goto	l962
  1278  00BC  288A               	goto	l958
  1279  00BD                     l120:	
  1280  00BD  0008               	return
  1281  00BE                     __end_of_ComSetup:	
  1282                           
  1283                           	psect	text8
  1284  00F0                     __ptext8:	
  1285 ;; *************** function _ISR *****************
  1286 ;; Defined at:
  1287 ;;		line 40 in file "main.c"
  1288 ;; Parameters:    Size  Location     Type
  1289 ;;		None
  1290 ;; Auto vars:     Size  Location     Type
  1291 ;;		None
  1292 ;; Return value:  Size  Location     Type
  1293 ;;                  1    wreg      void 
  1294 ;; Registers used:
  1295 ;;		wreg
  1296 ;; Tracked objects:
  1297 ;;		On entry : 0/0
  1298 ;;		On exit  : 0/0
  1299 ;;		Unchanged: 0/0
  1300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1301 ;;      Params:         0       0       0       0       0
  1302 ;;      Locals:         0       0       0       0       0
  1303 ;;      Temps:          2       0       0       0       0
  1304 ;;      Totals:         2       0       0       0       0
  1305 ;;Total ram usage:        2 bytes
  1306 ;; Hardware stack levels used:    1
  1307 ;; This function calls:
  1308 ;;		Nothing
  1309 ;; This function is called by:
  1310 ;;		Interrupt level 1
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314                           
  1315                           ;psect for function _ISR
  1316  00F0                     _ISR:	
  1317  00F0                     i1l792:	
  1318                           
  1319                           ;main.c: 41:     (INTCONbits.GIE = 0);
  1320  00F0  138B               	bcf	11,7	;volatile
  1321                           
  1322                           ;main.c: 42:     if(PIR1bits.RCIF == 1){
  1323  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  1324  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  1325  00F3  1E8C               	btfss	12,5	;volatile
  1326  00F4  28F6               	goto	u4_21
  1327  00F5  28F7               	goto	u4_20
  1328  00F6                     u4_21:	
  1329  00F6  28F9               	goto	i1l796
  1330  00F7                     u4_20:	
  1331  00F7                     i1l794:	
  1332                           
  1333                           ;main.c: 43:         PORTA = RCREG;
  1334  00F7  081A               	movf	26,w	;volatile
  1335  00F8  0085               	movwf	5	;volatile
  1336  00F9                     i1l796:	
  1337                           
  1338                           ;main.c: 45:     (INTCONbits.GIE = 1);
  1339  00F9  178B               	bsf	11,7	;volatile
  1340  00FA                     i1l50:	
  1341  00FA  0871               	movf	??_ISR+1,w
  1342  00FB  008A               	movwf	10
  1343  00FC  0E70               	swapf	??_ISR^(0+4294967168),w
  1344  00FD  0083               	movwf	3
  1345  00FE  0EFE               	swapf	btemp,f
  1346  00FF  0E7E               	swapf	btemp,w
  1347  0100  0009               	retfie
  1348  0101                     __end_of_ISR:	
  1349  007E                     btemp	set	126	;btemp
  1350  007E                     wtemp0	set	126
  1351                           
  1352                           	psect	intentry
  1353  0004                     __pintentry:	
  1354                           ;incstack = 0
  1355                           ; Regs used in _ISR: [wreg]
  1356                           
  1357  0004                     interrupt_function:	
  1358  007E                     saved_w	set	btemp
  1359  0004  00FE               	movwf	btemp
  1360  0005  0E03               	swapf	3,w
  1361  0006  00F0               	movwf	??_ISR
  1362  0007  080A               	movf	10,w
  1363  0008  00F1               	movwf	??_ISR+1
  1364  0009  120A  118A  28F0   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _setup->_spiInit

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     488
                                              6 COMMON     2     2      0
                           _ComSetup
                              _ENVIO
                              _setup
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      15
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     360
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     360
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _ENVIO                                                1     1      0      15
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ComSetup                                             2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ComSetup
   _ENVIO
   _setup
     _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       A      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Feb 19 18:14:54 2020

             __CFG_CP$OFF 0000               _SSPSTATbits 0094                        l61 00D9  
                      l81 0116                        l84 011C                        l77 00EA  
                      l78 00EF                        l95 0115                        l87 0122  
                      u20 011C                        u21 011B                        u30 0108  
                      u31 0107                        u50 00E2                        u51 00E1  
                      u67 002A                        u77 0041                        u87 0058  
                     l120 00BD                       l123 0102                       l126 010C  
                     l728 0116                       l930 00DB                       l932 00E2  
                     l940 00BE                       l780 011E                       l790 0108  
                     l934 00E4                       l950 00D8                       l942 00C2  
                     l782 010D                       l960 008D                       l952 0070  
                     l936 00E6                       l944 00CD                       l784 0112  
                     l962 0090                       l954 0084                       l938 00E9  
                     l946 00CE                       l956 0087                       l788 0102  
                     l948 00D7                       l958 008A                       l990 0015  
                     l968 0093                       l992 001A                       l994 0023  
                     l996 0026                       l998 002F              __CFG_CPD$OFF 0000  
                     _ISR 00F0              __CFG_LVP$OFF 0000                      ?_ISR 0070  
                    l1000 0035                      l1010 005D                      l1002 003D  
                    l1012 0060                      l1004 0046                      l1014 0066  
                    l1006 004C                      l1120 00AE                      l1008 0054  
                    l1122 00B3                      l1124 00B8                      l1116 00A4  
                    l1118 00A9                      i1l50 00FA                      u4_20 00F7  
                    u4_21 00F6              __CFG_WRT$OFF 0000                      _main 0015  
                    _pot1 0079                      _pot2 0078                      btemp 007E  
                    start 000C             __CFG_IESO$OFF 0000                     ??_ISR 0070  
                   ?_main 0070             __CFG_WDTE$OFF 0000                     _ANSEL 0188  
                   _ENVIO 0101                     i1l792 00F0                     i1l794 00F7  
                   i1l796 00F9                     _RCREG 001A                     _SPBRG 0099  
                   _PORTA 0005                     _PORTB 0006                     _PORTD 0008  
                   _TRISA 0085                     _TRISB 0086                     _TRISD 0088  
                   _TXREG 0019            __CFG_FCMEN$OFF 0000                     _setup 00BE  
          __CFG_BOREN$OFF 0000                     pclath 000A           __end_of_spiInit 00F0  
         __end_of_spiRead 0116                     status 0003                     wtemp0 007E  
        __end_of_ComSetup 00BE            __CFG_MCLRE$OFF 0000           __initialization 000F  
            __end_of_main 0070                    ??_main 0076                    ?_ENVIO 0070  
                  ?_setup 0070                    _ANSELH 0189                    _TRISC2 043A  
                  _TRISC3 043B                    _TRISC5 043D                    _SSPCON 0014  
                  _SSPBUF 0013            __CFG_PWRTE$OFF 0000                    saved_w 007E  
        __end_of_spiWrite 0123                 ??_spiInit 0075                 ??_spiRead 0072  
 __end_of__initialization 0011             __end_of_ENVIO 010D            __pcstackCOMMON 0070  
           __end_of_setup 00DA                   ??_ENVIO 0072                 ?_ComSetup 0072  
                 ??_setup 0076                __pmaintext 0015                __pintentry 0004  
 __size_of_spiReceiveWait 0007                ??_ComSetup 0074                   _SSPSTAT 0094  
               ?_spiWrite 0070                   __ptext1 011D                   __ptext2 010D  
                 __ptext3 0116                   __ptext4 00BE                   __ptext5 00DA  
                 __ptext6 0101                   __ptext7 0070                   __ptext8 00F0  
            __size_of_ISR 0011                   _spiInit 00DA                   _spiRead 010D  
    end_of_initialization 0011                 _RCSTAbits 0018                ??_spiWrite 0072  
               _PORTCbits 0007               spiWrite@dat 0072                ENVIO@value 0072  
               _TXSTAbits 0098            _spiReceiveWait 0116               _BAUDCTLbits 0187  
     start_initialization 000F               __end_of_ISR 0101         __size_of_ComSetup 004E  
__CFG_FOSC$INTRC_NOCLKOUT 0000    __end_of_spiReceiveWait 011D               __pbssCOMMON 0078  
               ___latbits 0002           ?_spiReceiveWait 0070         __size_of_spiWrite 0006  
          __size_of_ENVIO 000C                  ?_spiInit 0072                  ?_spiRead 0070  
          __size_of_setup 001C      spiInit@sTransmitEdge 0074         interrupt_function 0004  
                _PIE1bits 008C        spiInit@sDataSample 0072                  _PIR1bits 000C  
                _ComSetup 0070          __size_of_spiInit 0016          __size_of_spiRead 0009  
       __CFG_BOR4V$BOR40V 0000             __size_of_main 005B                  _spiWrite 011D  
            spiInit@sType 0075         spiInit@sClockIdle 0073                _INTCONbits 000B  
                intlevel1 0000          ??_spiReceiveWait 0072                ComSetup@BR 0072  
